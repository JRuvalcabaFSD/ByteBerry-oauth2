name: 🚀 Release CI - OAUTH2

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write

env:
  NODE_VERSION: '22.18.0'
  REGISTRY: docker.io
  IMAGE_NAME: jruvalcabafsd/byteberry-oauth2

jobs:
  setup-and-validate:
    name: ✅ Setup & Validate
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      next-version: ${{ steps.plan.outputs.next-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 💾 Cache node_modules
        uses: actions/cache/save@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: 🔍 Run full validation
        run: |
          export NODE_ENV=test
          export CI=true
          pnpm type-check
          pnpm lint
          pnpm audit
          pnpm build
          pnpm test:coverage

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-release
          path: dist/
          retention-days: 1

      - name: 🔍 Check if should release
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ Manual release triggered"
          else
            COMMITS=$(git log --format="%s" HEAD~1..HEAD)
            if echo "$COMMITS" | grep -E "^(feat|fix|BREAKING CHANGE)"; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "✅ Found releasable commits"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "⏭️ No releasable commits found"
            fi
          fi

      - name: 🧮 Plan next version (semantic-release dry-run)
        id: plan
        if: steps.check.outputs.should-release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Running semantic-release in dry-run mode..."
          pnpm dlx semantic-release --dry-run --no-ci > sr-dry-run.log 2>&1 || true

          # Extraer la versión planeada
          NEXT=$(grep -Eo "next release version is [0-9]+\.[0-9]+\.[0-9]+" sr-dry-run.log | awk '{print $NF}' | tail -n1)

          if [ -z "$NEXT" ]; then
            echo "⚠️ No new version planned by semantic-release"
            echo "next-version=" >> $GITHUB_OUTPUT
          else
            echo "next-version=$NEXT" >> $GITHUB_OUTPUT
            echo "📋 Planned next version: $NEXT"
          fi

  docker:
    name: 🐳 Build & Push Docker
    runs-on: ubuntu-latest
    needs: [setup-and-validate]
    if: needs.setup-and-validate.outputs.next-version != ''
    outputs:
      image-pushed: ${{ steps.pushcheck.outputs.ok }}
      version: ${{ steps.vars.outputs.version }}
      image-tag: ${{ steps.vars.outputs.image-tag }}
      image-latest: ${{ steps.vars.outputs.image-latest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Compute version & tags
        id: vars
        run: |
          VERSION="${{ needs.setup-and-validate.outputs.next-version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image-tag=${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
          echo "image-latest=${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "🏷️ Will build version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ steps.vars.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.vars.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.vars.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.description=ByteBerry OAuth2 API
            org.opencontainers.image.vendor=JRuvalcabaFSD
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 🗃️ Build & push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.vars.outputs.version }}
          tags: |
            ${{ steps.vars.outputs.image-tag }}
            ${{ steps.vars.outputs.image-latest }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 🧪 Test multi-arch images
        run: |
          echo "🧪 Testing published images..."

          echo "Testing AMD64 image..."
          docker run --rm --platform linux/amd64 \
            ${{ steps.vars.outputs.image-tag }} \
            node -e "console.log('✅ AMD64 image working - version ${{ steps.vars.outputs.version }}')"

          echo "Testing ARM64 image availability..."
          docker manifest inspect ${{ steps.vars.outputs.image-tag }} | grep "arm64" && echo "✅ ARM64 image available"

      - name: ✅ Verify push (manifest)
        id: pushcheck
        run: |
          docker buildx imagetools inspect "${{ steps.vars.outputs.image-tag }}"
          docker buildx imagetools inspect "${{ steps.vars.outputs.image-latest }}"
          echo "ok=true" >> $GITHUB_OUTPUT
          echo "✅ Multi-arch images verified"

      - name: 📊 Image summary
        run: |
          echo "## 🐳 Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | Platforms | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`${{ steps.vars.outputs.version }}\` | linux/amd64, linux/arm64 | ✅ Published |" >> $GITHUB_STEP_SUMMARY
          echo "| \`latest\` | linux/amd64, linux/arm64 | ✅ Published |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Pull Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.vars.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Latest version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.vars.outputs.image-latest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Raspberry Pi 5 (ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull --platform linux/arm64 ${{ steps.vars.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  release:
    name: 🏷️ Publish Release
    runs-on: ubuntu-latest
    needs: [setup-and-validate, docker]
    if: |
      needs.setup-and-validate.outputs.should-release == 'true' &&
      needs.docker.result == 'success' &&
      needs.docker.outputs.image-pushed == 'true'
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📦 Run semantic-release (REAL)
        id: sr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Running semantic-release to publish..."
          pnpm dlx semantic-release --no-ci

      - name: 📋 Get published version
        id: get-version
        run: |
          # Traer todos los tags
          git fetch --tags

          # Obtener el último tag creado (el que acabó de crear semantic-release)
          TAG=$(git describe --tags --abbrev=0)

          # Extraer versión quitando la "v" del inicio
          VERSION=${TAG#v}

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "✅ Published version: $VERSION"
          echo "✅ Created tag: $TAG"

      - name: 📊 Release summary
        run: |
          echo "## 🎉 Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Version | \`${{ steps.get-version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Tag | \`${{ steps.get-version.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker | \`${{ needs.docker.outputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY

  sync-develop:
    name: 🔄 Sync develop with release
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check if sync needed
        id: check
        run: |
          git fetch origin develop main --tags

          # Verificar si develop existe
          if ! git rev-parse --verify origin/develop &>/dev/null; then
            echo "sync-needed=false" >> $GITHUB_OUTPUT
            echo "⚠️ Branch develop does not exist, skipping sync"
            exit 0
          fi

          # Verificar commits ahead en main
          COMMITS_AHEAD=$(git rev-list --count origin/develop..origin/main)

          if [ "$COMMITS_AHEAD" -eq 0 ]; then
            echo "sync-needed=false" >> $GITHUB_OUTPUT
            echo "✅ Develop is already up to date"
          else
            echo "sync-needed=true" >> $GITHUB_OUTPUT
            echo "commits-ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
            echo "📋 Develop is $COMMITS_AHEAD commits behind main"
          fi

      - name: 🔄 Sync develop with main
        if: steps.check.outputs.sync-needed == 'true'
        run: |
          RELEASE_VERSION="${{ needs.release.outputs.version }}"
          RELEASE_TAG="${{ needs.release.outputs.tag }}"

          echo "🔄 Syncing develop with main after release $RELEASE_TAG..."

          # Configurar git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Checkout develop
          git checkout develop
          git pull origin develop

          # Intentar fast-forward merge primero
          if git merge-base --is-ancestor origin/develop origin/main; then
            echo "✅ Fast-forward merge possible"
            git merge --ff-only origin/main
          else
            echo "⚠️ Fast-forward not possible, creating merge commit"
            git merge --no-ff origin/main -m "chore: sync develop with release ${RELEASE_TAG}

            Auto-sync after successful Release-CI completion.

            Release info:
            * Version: ${RELEASE_VERSION}
            * Tag: ${RELEASE_TAG}
            * Docker: ${{ needs.docker.outputs.image-tag }}
            * Trigger: ${{ github.event_name }}
            * Commit: ${{ github.sha }}"
          fi

          # Push develop
          git push origin develop
          echo "✅ Develop synced with release $RELEASE_TAG"

      - name: 📊 Sync summary
        run: |
          if [ "${{ steps.check.outputs.sync-needed }}" == "true" ]; then
            echo "## 🔄 Develop Sync Completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📦 Release Version | \`${{ needs.release.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| 🏷️ Release Tag | \`${{ needs.release.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| 📝 Commits Synced | ${{ steps.check.outputs.commits-ahead }} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🎯 Target Branch | develop |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Status | Synchronized |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check.outputs.sync-needed }}" == "false" ]; then
            echo "## ✅ No Sync Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Develop branch is already up to date with main." >> $GITHUB_STEP_SUMMARY
          fi
