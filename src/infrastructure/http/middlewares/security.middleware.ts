import { RequestHandler } from 'express';

import helmet from 'helmet';

/**
 * Creates an HTTP security middleware configured with Helmet.
 *
 * The middleware enforces a conservative Content Security Policy (CSP) and
 * HTTP Strict Transport Security (HSTS) headers to reduce the attack surface
 * for common web vulnerabilities.
 *
 * CSP directives applied:
 * - default-src: 'self'
 * - style-src: 'self' 'unsafe-inline' (allows inline styles; relax this if possible)
 * - script-src: 'self'
 * - img-src: 'self' data: https:
 *
 * HSTS configuration:
 * - maxAge: 31536000 (1 year)
 * - includeSubDomains: true
 * - preload: true
 *
 * Remarks:
 * - The CSP is intentionally strict. If your application loads resources from
 *   external domains (CDNs, analytics, etc.) or uses inline scripts/styles,
 *   update the directives accordingly.
 * - HSTS should only be enabled for sites served over HTTPS. Ensure HTTPS is
 *   properly configured before enabling HSTS in production.
 *
 * @returns {RequestHandler} An Express-compatible middleware
 *   function generated by Helmet that applies the above security headers.
 *
 * @example
 * // In an Express app:
 * // app.use(createSecurityMiddleware());
 */

export function createSecurityMiddleware(): RequestHandler {
  return helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", 'data:', 'https:'],
      },
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true,
    },
  });
}
